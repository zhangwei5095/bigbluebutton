<?xml version="1.0" encoding="utf-8"?>
<s:ItemRenderer xmlns:fx="http://ns.adobe.com/mxml/2009"
				xmlns:s="library://ns.adobe.com/flex/spark"
				xmlns:mx="library://ns.adobe.com/flex/mx"
				autoDrawBackground="false"
				styleName="statusItemStyle">
	<s:states>
		<s:State name="normal" />
		<s:State name="selected" />
	</s:states>

	<fx:Script>
		<![CDATA[
			import org.bigbluebutton.lib.user.models.User;
			
			override public function set data(obj:Object):void {
				super.data = obj;
				if (obj) {
					profileIcon.visible = profileIcon.includeInLayout = obj.signal == User.NO_STATUS;
					handIcon.visible = handIcon.includeInLayout = obj.signal == User.RAISE_HAND;
					beRightBackIcon.visible = beRightBackIcon.includeInLayout = obj.signal == User.AWAY;
					laughterIcon.visible = laughterIcon.includeInLayout = obj.signal == User.HAPPY;
					sadIcon.visible = sadIcon.includeInLayout = obj.signal == User.SAD;
				}
			}
		]]>
	</fx:Script>
	<s:Group id="content">
		<s:layout>
			<s:VerticalLayout horizontalAlign="center"
							  verticalAlign="middle" />
		</s:layout>

		<s:Label id="labelDisplay"
				 width="{icon.width * 2}"
				 textAlign="center"
				 lineBreak="explicit"
				 styleName="contentFontSize" />

		<s:Group id="icon">
			<s:Button id="profileIcon"
					  styleName="bottomPresentationBtnStyle noStatusButtonStyle"
					  height="100%" />
			<s:Button id="handIcon"
					  styleName="bottomPresentationBtnStyle handStatusButtonStyle"
					  height="100%" />
			<s:Button id="beRightBackIcon"
					  styleName="bottomPresentationBtnStyle beRightBackStatusButtonStyle"
					  height="100%" />
			<s:Button id="laughterIcon"
					  styleName="bottomPresentationBtnStyle laughterStatusButtonStyle"
					  height="100%" />
			<s:Button id="sadIcon"
					  styleName="bottomPresentationBtnStyle sadStatusButtonStyle"
					  height="100%" />
		</s:Group>
	</s:Group>

	<s:Group visible.normal="false"
			 width="100%"
			 x="{icon.x + icon.width - selectionCircle.width/1.5}"
			 y="{icon.y + icon.height/4}"
			 height="100%">
		<s:Ellipse id="selectionCircle"
				   height="25%"
				   width="{selectionCircle.height}">
			<s:fill>
				<s:SolidColor color="{getStyle('selectedColor')}" />
			</s:fill>
		</s:Ellipse>

		<s:Ellipse id="innerSelectionCircle"
				   height="{selectionCircle.height * 0.7}"
				   width="{innerSelectionCircle.height}"
				   x="{selectionCircle.x + (selectionCircle.width - innerSelectionCircle.width)/2}"
				   y="{selectionCircle.y + (selectionCircle.height - innerSelectionCircle.height)/2}">
			<s:stroke>
				<s:SolidColorStroke color="{getStyle('strokeColor')}" />
			</s:stroke>
		</s:Ellipse>

		<s:Line id="selectedLine1"
				xFrom="{innerSelectionCircle.x + innerSelectionCircle.width / 3.2}"
				xTo="{innerSelectionCircle.x + innerSelectionCircle.width / 2.3}"
				yFrom="{innerSelectionCircle.y + innerSelectionCircle.height / 2}"
				yTo="{innerSelectionCircle.y + innerSelectionCircle.height / 1.5}">
			<s:stroke>
				<s:SolidColorStroke color="{getStyle('strokeColor')}" />
			</s:stroke>
		</s:Line>

		<s:Line id="selectedLine2"
				xFrom="{innerSelectionCircle.x + innerSelectionCircle.width / 1.4}"
				xTo="{innerSelectionCircle.x + innerSelectionCircle.width / 2.3}"
				yFrom="{innerSelectionCircle.y + innerSelectionCircle.height / 2.5}"
				yTo="{innerSelectionCircle.y + innerSelectionCircle.height / 1.5}">
			<s:stroke>
				<s:SolidColorStroke color="{getStyle('strokeColor')}" />
			</s:stroke>
		</s:Line>

	</s:Group>

</s:ItemRenderer>
