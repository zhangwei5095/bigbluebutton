<?xml version="1.0" encoding="utf-8"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009"
			   xmlns:s="library://ns.adobe.com/flex/spark"
			   xmlns:main="org.bigbluebutton.air.main.views.*"
			   xmlns:voice="org.bigbluebutton.air.voice.views.*"
			   applicationComplete="applicationCompleteHandler(event)"
			   preinitialize="preinitializeHandler(event)"
			   runtimeDPIProvider="CustomRuntimeDPIProvider"
			   styleName="mainshellStyle"
			   xmlns:loadingscreen="org.bigbluebutton.air.main.views.ui.loadingscreen.*"
			   xmlns:pagesnavigator="org.bigbluebutton.air.main.views.pagesnavigator.*"
			   xmlns:menubuttons="org.bigbluebutton.air.main.views.menubuttons.*"
			   xmlns:navigationbutton="org.bigbluebutton.air.main.views.ui.navigationbutton.*"
			   xmlns:topbar="org.bigbluebutton.air.main.views.topbar.*"
			   xmlns:recordingstatus="org.bigbluebutton.air.main.views.recordingstatus.*"
			   xmlns:recordingstatus1="org.bigbluebutton.air.main.views.ui.recordingstatus.*"
			   xmlns:videobutton="org.bigbluebutton.air.main.views.ui.videobutton.*">
	<fx:Style source="Default.css" />

	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>

	<fx:Script>
		<![CDATA[
			import com.adobe.utils.LocaleUtil;
			
			import mx.events.FlexEvent;
			import mx.resources.ResourceManager;
			
			import org.bigbluebutton.air.AppConfig;
			import org.bigbluebutton.air.chat.ChatConfig;
			import org.bigbluebutton.air.deskshare.DeskshareConfig;
			import org.bigbluebutton.air.main.MainConfig;
			import org.bigbluebutton.air.main.utils.OrientationCalculator;
			import org.bigbluebutton.air.presentation.PresentationConfig;
			import org.bigbluebutton.air.settings.SettingsConfig;
			import org.bigbluebutton.air.users.UsersConfig;
			import org.bigbluebutton.air.video.VideoConfig;
			import org.bigbluebutton.air.voice.VoiceConfig;
			import org.bigbluebutton.lib.whiteboard.views.WhiteboardConfig;
			
			import robotlegs.bender.bundles.mvcs.MVCSBundle;
			import robotlegs.bender.extensions.contextView.ContextView;
			import robotlegs.bender.extensions.signalCommandMap.SignalCommandMapExtension;
			import robotlegs.bender.framework.api.IContext;
			import robotlegs.bender.framework.api.LogLevel;
			import robotlegs.bender.framework.impl.Context;
			
			protected var context:IContext;
			
			private var _orientationCalc:OrientationCalculator;
			
			public var currentOrientation:String;
			
			protected function preinitializeHandler(event:FlexEvent):void {
				setupContext();
				resizeForSoftKeyboard = true;
				ResourceManager.getInstance().localeChain = LocaleUtil.sortLanguagesByPreference(['en_US'], Capabilities.languages, "en_US");
			}
			
			/**
			 * Sets up the Robotlegs context.
			 */
			private function setupContext():void {
				context = new Context().install(MVCSBundle, SignalCommandMapExtension).configure(AppConfig).
					
					configure(MainConfig).configure(PresentationConfig).configure(ChatConfig).configure(VideoConfig).configure(UsersConfig).configure(VoiceConfig).configure(DeskshareConfig).configure(SettingsConfig).configure(PresentationConfig).configure(WhiteboardConfig)
					
					.configure(new ContextView(this));
				// If you wish to change the log level then uncomment the line below and set 
				// the logLevel to the value you desire. The default logLevel is DEBUG, which 
				// is set in the MVCSBundle. The default log level traces out the framework 
				// actions, which can assist in learning Robotlegs.
				setLogLevel();
			}
			
			/**
			 * Sets the logLevel for the robotegs context.
			 */
			private function setLogLevel():void {
				// setting the logLevel to WARN means that robotlegs
				// will also notify us about ERROR & FATAL.
				context.logLevel = LogLevel.WARN;
			}
			
			protected function applicationCompleteHandler(event:FlexEvent):void {
				NativeApplication.nativeApplication.systemIdleMode = SystemIdleMode.KEEP_AWAKE;
			}
		]]>
	</fx:Script>

	<fx:Metadata>
		[ResourceBundle("resources")]
	</fx:Metadata>

	<loadingscreen:LoadingScreen width="100%"
								 height="100%" />

	<s:Group width="100%"
			 height="100%"
			 id="mainshell"
			 visible="false">
		<s:layout>
			<s:VerticalLayout gap="0"
							  horizontalAlign="center" />
		</s:layout>

		<topbar:TopBarView id="topActionBar"
						   width="100%"
						   depth="999"
						   verticalCenter="0"
						   horizontalCenter="0"
						   height="{getStyle('toolBarHeight')}" />

		<pagesnavigator:PagesNavigatorView id="pagesNavigatorView"
										   width="100%"
										   height="100%" />
		<menubuttons:MenuButtonsView id="bottomMenu"
									 width="100%"
									 height="{getStyle('bottomToolBarHeight')}" />

	</s:Group>
</s:Application>
